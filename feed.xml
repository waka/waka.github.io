<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yo_waka's blog</title>
  <subtitle>Fragment of code</subtitle>
  <id>http://waka.github.io</id>
  <link href="http://waka.github.io"/>
  <updated>2017-05-07T00:00:00+0000</updated>
  <author>
    <name>yo_waka</name>
  </author>
  <entry>
    <title>slackとshellとeditorとtwitter</title>
    <link rel="alternate" href="http://waka.github.io/2017/5/7/20170507_dan_sha_ri.html"/>
    <id>http://waka.github.io/2017/5/7/20170507_dan_sha_ri.html</id>
    <published>2017-05-07T00:00:00+0000</published>
    <updated>2017-05-07T00:14:23+0900</updated>
    <author>
      <name>yo_waka</name>
    </author>
    <content type="html">&lt;h1&gt;slackとshellとeditorとtwitter&lt;/h1&gt;

&lt;p&gt;最近、業務時間中見ている時間が長いのが掲題の4つなので使い方を見直した。どう見ても日記です。&lt;/p&gt;

&lt;h2&gt;slack&lt;/h2&gt;

&lt;p&gt;STARREDなchannelを10個に減らした。見なきゃいけないのが1つ増えたらどこか1つ減らして10個以上にしないルールにしている。&lt;br&gt;
STARRED以外のチャンネルについても10個を除いてすべてmute（たまにメンションされるもの）かleaveするというルールにした。&lt;br&gt;
業務関係ないゆるふわなchannelは自分自身が活用している1つを除いて全部leave。&lt;br&gt;
この運用にしてからは通知が減ったため、slackを見てしまう時間が減ってよい感じ。&lt;br&gt;
とはいえ、コミュニケーション系の部屋でメンションを飛ばされる、そしてそのやりとりが続くと時間が吸い取られ疲弊するのなんとかしたい。&lt;br&gt;
そして、スレッドはやりとりがブラックボックスにしかならないのでやめような。&lt;/p&gt;

&lt;h2&gt;shell&lt;/h2&gt;

&lt;p&gt;zshのスクリプトメンテするのめんどくなってきたし、そもそも自分はzshのこと全然よくわかってなかったことに気づいたのでfishに乗り換えた。&lt;br&gt;
&lt;a href="https://fisherman.github.io/"&gt;fisherman&lt;/a&gt;便利。これまでzshでやってたことはほぼプラグインでインストールできたのでもうスクリプト書かなくてよくなった。&lt;br&gt;
ついでにpecoからfzfに乗り換え。&lt;br&gt;
デフォルトでいい感じに補完が効くし表示もよい。今の開発環境では特に問題も起きてないのでもうこれでいいやという気持ち。&lt;/p&gt;

&lt;p&gt;入れたプラグイン&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;z&lt;/li&gt;
&lt;li&gt;ghq&lt;/li&gt;
&lt;li&gt;fzf&lt;/li&gt;
&lt;li&gt;git_util&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zshの方が便利だなーと思ったのはエイリアスの機能。&lt;br&gt;
普段仕事で触ってるgitリポジトリが大きいのでブランチ補完が遅く、&lt;code&gt;B&lt;/code&gt; とか打つとpecoでgit branchの結果をフィルタするエイリアスにしてた。&lt;br&gt;
fishだとできないので、こんな感じでコマンド作ってお茶を濁した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;git branch | fzf | xargs git checkout&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;git branch | fzf | xargs git branch -D&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gp&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;git branch | fzf | xargs git push origin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;editor&lt;/h2&gt;

&lt;p&gt;vimからVSCodeに乗り換えた（何年かぶり何回目）。&lt;br&gt;
これもfishと同じでなるべく自分で設定するのはもうやめようという気持ちから。nvimになってもろもろプラグインが新しくなったり開発も活発だったりしていてvimrcメンテするの疲れてしまった。&lt;br&gt;
VSCodeは統合環境ぽさがあって、プラグイン入れたらほとんど設定せずにいい感じに使えるのが素敵。変える場合もJSONで設定ファイル弄れるのがよい。&lt;/p&gt;

&lt;p&gt;入れたプラグイン&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;Dracura&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さすがMSというか、ファイル検索が本当に早い。大きなリポジトリでも適当なワードでサクサク検索できる。&lt;br&gt;
統合ターミナルも便利。これでiTerm2をアプリとして立ち上げる場面が激減した。SSHログインするときくらいしかもうiTerm2起動してない。立ち上げるアプリを減らせてよかった。&lt;/p&gt;

&lt;h2&gt;twitter&lt;/h2&gt;

&lt;p&gt;なんだかんだ仕事中開いてちょくちょく見ちゃう。そしてその際にターミナルからアプリを切り替えることで集中が切れてしまうのなんとかしたかった。&lt;br&gt;
ので、VSCodeの統合ターミナル上で見れるように&lt;a href="https://github.com/waka/twg-go"&gt;CUIアプリとして動くtwitterクライアント&lt;/a&gt;作った。&lt;br&gt;
GWだしGolangで何か書いてみたかったのもある。&lt;/p&gt;

&lt;p&gt;TweetDeckみたいに複数TLを見たければtmuxでペイン分割して起動すればいい。欲しかったので自動読み込みもつけた。&lt;br&gt;
&lt;img src="/assets/images/vscode_01.png" /&gt;&lt;/p&gt;

&lt;p&gt;全然関係ないけど、CUIアプリはWebアプリのUI(HTML)と違って子コンポーネントからrenderしていって、最後に全描画内容をflushするのが面白い。&lt;br&gt;
最初同じUI設計だしfluxぽくやるかと始めたら全然相性よくなくて止めた。素直にイベントリスナー使うようにした。&lt;br&gt;
描画周りはpecoで使われていた&lt;a href="https://github.com/nsf/termbox-go"&gt;termbox-go&lt;/a&gt;を使った。めんどくさいエスケープシーケンスやカラーリング周りを上手く抽象化してくれていて簡単に書けて便利。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>78.9 (7hack)というPodcastを聴くためのAndroidアプリを作った</title>
    <link rel="alternate" href="http://waka.github.io/2017/1/22/released_podcast_app.html"/>
    <id>http://waka.github.io/2017/1/22/released_podcast_app.html</id>
    <published>2017-01-22T00:00:00+0000</published>
    <updated>2017-02-05T15:42:18+0900</updated>
    <author>
      <name>yo_waka</name>
    </author>
    <content type="html">&lt;h1&gt;78.9 (7hack)というPodcastを聴くためのAndroidアプリを作った&lt;/h1&gt;

&lt;p&gt;本当に今更ながら、通勤でPodcastを聴くことが習慣づいてきた。&lt;br&gt;
&lt;a href="http://qiita.com/suginoy/items/dada11eef775b883320f"&gt;なんかこの1年くらいTech系のPodcast増えてませんか&lt;/a&gt;。どれも面白くてすごい。&lt;/p&gt;

&lt;p&gt;自分の携帯端末はAndroidなのでFM Playerというアプリで聴いていて、非常に高機能でよくできたアプリなんだけど、自分にはオススメ番組や後で聴く機能とか必要なくて、なんかもうちょっと軽くて操作に集中できるUIのアプリないかなと探してもしっくりくるのがなかった。&lt;br&gt;
そんな折、年末に新しいAndroid端末に変えてAndroid愛が高まったのと、ここ最近Android開発ご無沙汰だったので、最近の開発環境をキャッチアップするのも兼ねてPodcastアプリを作ってみました。&lt;/p&gt;

&lt;p&gt;というわけで、先ほど&lt;a href="https://play.google.com/store/apps/details?id=io.github.waka.sevenhack"&gt;78.9(7hack)というアプリをPlayStoreに公開しました&lt;/a&gt;。よかったら。&lt;br&gt;
Podcastを「探す」「見る」「聴く」に特化した機能のみなので、自分のようにサッと登録してチャッと聴きたい人向け。&lt;br&gt;
78.9というのは地元のFMラジオの周波数で、昔Nack5(79.5)をよく聴いていたのを思い出したのでモジってみた。&lt;/p&gt;

&lt;p&gt;もちろん&lt;a href="https://github.com/waka/SevenHack"&gt;ソースコードも公開しています&lt;/a&gt;。&lt;br&gt;
最近のSupportLibraryを結構使ってるのと、RxJava2とSQLBriteを組み合わせて使ってたりします。&lt;/p&gt;

&lt;p&gt;個人で久しぶりにアプリ作ったけど、ユーザーが自分なのとUI自由に考えられて楽しい。&lt;br&gt;
マネージメントメインになってから自分でUIを考える機会が減ったのでリハビリとしてもよかった。&lt;/p&gt;

&lt;h2&gt;開発メモ的な&lt;/h2&gt;

&lt;p&gt;自分が業務でAndroidの機能実装したの、2年前にMaterialDesign対応して以来なので、最近はSupportLibraryでのMaterialDesign表現が充実していてびっくりした。&lt;br&gt;
特にCollapsingToolbarLayoutやFloatingActionButtonが標準で用意されてるなんて・・、キーラインもほとんど自前で定義する必要なくなってて進化すごい。&lt;/p&gt;

&lt;h3&gt;DBアクセス層&lt;/h3&gt;

&lt;p&gt;RSSフィードをSQLiteに保存したいが、生SQLiteHelperもアレだし何か使おうと思って探してみたところ、いい感じに薄そうだったSQLBriteを採用。&lt;br&gt;
SQLBriteのいいところは、いい感じに薄いのでDAO層を作りやすいのと、Transactionが使いやすいところ。&lt;br&gt;
逆にそうでもなかったところは、SQLBriteが標準で用意しているRxJavaサポートで、これはSelect文を発行するObservableをSubscribeしておくと、そのテーブルに行が挿入/削除など変更があったときに自動でSubscriberを実行してくれるというもの。&lt;br&gt;
RecyclerViewでnotifyDataChangedでなくnotifyItemRemovedやnotifyItemChangedを使ってアニメーションさせたり変更を最小限にしようと思っても、Subscriberで再読み込みされてしまうので、実装が複雑になって相性がよくないと感じた。&lt;/p&gt;

&lt;p&gt;結局、DAO層はSQLBrite#queryを愚直に使ってObservableを返さずEntityを返すのみにして、ビジネスロジックを扱うLogic層でDAOの結果を返すObservableを返すようにした。&lt;br&gt;
どのみち、SQLBriteが依存しているRxJavaは1系なので、RxJava2を入れた時点でこうするしかない。&lt;br&gt;
UI層から直接DAOを叩くことはしないので、実装的には見通しがよくなってよかった。&lt;/p&gt;

&lt;p&gt;EpisodeDao&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Singleton&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EpisodeDao&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Podcast&lt;/span&gt; &lt;span class="n"&gt;podcast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Formatter&lt;/span&gt; &lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Locale&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JAPANESE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LIST_QUERY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;podcast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;Cursor&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;moveToNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// entityに詰める&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EpisodeLogic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Singleton&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EpisodeLogic&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Podcast&lt;/span&gt; &lt;span class="n"&gt;podcast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;just&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;episodeDao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;podcast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;withEnclosureCache&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribeOn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Schedulers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newThread&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;observeOn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AndroidSchedulers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mainThread&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;withEnclosureCache&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;just&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enclosureCacheDao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enclosureCaches&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Episode&lt;/span&gt; &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// set cache to episode&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この辺をやってるところで、&lt;a href="https://github.com/gfx/Android-Orma"&gt;Orma&lt;/a&gt;の存在に気づいてあーっとなった。&lt;br&gt;
Ormaもいい感じに薄い上に、relationの定義も簡単だし、migrationも使いやすそう。多分次何か作る場合はOrmaを採用すると思います。&lt;/p&gt;

&lt;h3&gt;APIアクセス層&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/square/retrofit"&gt;Retrofit2&lt;/a&gt;を採用してみた。&lt;br&gt;
Retrofit1時代にSimpleXMLConverterを使ってみたことがあって、そのときは結構バギーな印象だったけど、今の所特に問題は起きてない。&lt;br&gt;
宣言的なAPIクライアントとPOJOだけでよくなるのでXMLのパースをサクッと書けて最高でした。&lt;br&gt;
話はずれるが、PodcastのATOMフィードは各番組でXMLの仕様が微妙に違っていて辛い。&lt;/p&gt;

&lt;h3&gt;StethoとLeakCanary&lt;/h3&gt;

&lt;p&gt;今回使ってみて感動した開発向けライブラリを2つ。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://facebook.github.io/stetho/"&gt;Stetho&lt;/a&gt;を使うとSQLiteの中身や通信の中身をChromeのdeveloper consoleで見ることができる。&lt;br&gt;
（通信の中身を見る場合はOKHttp用のヘルパーを別途dependencyで指定する必要はある）&lt;br&gt;
以前PonyDebuggerというのがあって、同様にChromeから通信内容見れたけど、それの高機能版という感じか。&lt;br&gt;
SQLiteの中身をLocalStorage見る感覚で確認できるの最高。&lt;br&gt;
使い方も簡単で、Applicationクラスで初期化するだけでOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainApplication&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Stetho&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initializeWithDefaults&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://github.com/square/leakcanary"&gt;LeakCanary&lt;/a&gt;はメモリリークを検出するライブラリ。&lt;br&gt;
アプリを操作してメモリーリークが発生すると、通知されてどこでリークが発生したかが分かる。&lt;br&gt;
ログを見てると、GCを走らせてactivityの参照が残ってないかをチェックしている？&lt;br&gt;
リークが一定時間発生しなかったら「No leak!」と通知されて気持ちいい。&lt;br&gt;
こちらもApplicationクラスで初期化するだけでOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainApplication&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;LeakCanary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;install&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>最近のnpmライブラリ書くときのpackage.json</title>
    <link rel="alternate" href="http://waka.github.io/2015/12/12/npm_setup.html"/>
    <id>http://waka.github.io/2015/12/12/npm_setup.html</id>
    <published>2015-12-12T00:00:00+0000</published>
    <updated>2017-02-05T15:42:18+0900</updated>
    <author>
      <name>yo_waka</name>
    </author>
    <content type="html">&lt;h1&gt;最近のnpmライブラリ書くときのpackage.json&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://qiita.com/advent-calendar/2015/nodejs"&gt;Node.js Advent Calendar 2015&lt;/a&gt; 12日目の記事です&lt;/p&gt;

&lt;p&gt;最近はES2015で書き出すのが普通になってきたので、初期構成がだいたい似たような感じになってる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;NAME&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;DESCRIPTION&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;repository&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;GITHUB URL&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./lib/index.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;files: [&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;lib&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;],&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;directories&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: {&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;  },&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;devDependencies&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: {&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;es2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;commonjs&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;preset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;es2015&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;mocha&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;srcにES2015で書いて、Babelでlib下に吐き出す。&lt;br&gt;
filesにlibだけを書いておけば成果物のサイズが小さくなるのでおすすめ。&lt;/p&gt;

&lt;p&gt;.gitignoreにはlibを指定しておき、npmで公開するもの（ES5）とgithubで公開するもの（ES2015）は分ける。&lt;/p&gt;

&lt;p&gt;また、テストはmochaの場合、最近はbabel-coreがあればES2015でテストを書くことが可能になっている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mocha --require babel-core/register --recursive&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>RailsのAsset PipelineとPrecompileをNode.jsのみで処理できるgulp-sprocketsを作った</title>
    <link rel="alternate" href="http://waka.github.io/2015/11/25/gulp_sprockets.html"/>
    <id>http://waka.github.io/2015/11/25/gulp_sprockets.html</id>
    <published>2015-11-25T00:00:00+0000</published>
    <updated>2017-02-05T15:42:18+0900</updated>
    <author>
      <name>yo_waka</name>
    </author>
    <content type="html">&lt;h1&gt;RailsのAsset PipelineとPrecompileをNode.jsのみで処理できるgulp-sprocketsを作った&lt;/h1&gt;

&lt;p&gt;仕事ではRailsアプリを書いていて、JSやCSSなどのフロントエンドはRailsのAsset Pipelineの仕組みに則ってビルドしてる。&lt;/p&gt;

&lt;p&gt;普通にRailsアプリ作ってると普段&lt;a href="https://github.com/sstephenson/sprockets"&gt;Sprockets&lt;/a&gt;について特に意識しないと思う。&lt;br&gt;&lt;br&gt;
Sprocketsはそこが凄くて、あまり考えなくてもドキュメント通りにやってれば、必要なAssetを結合できて、リリース時は変更がなければブラウザキャッシュから、変更があれば&lt;br&gt;
新しく読み込まれるみたいなことをやってくれる。&lt;/p&gt;

&lt;p&gt;なんだけど、もうそろそろ新しい機能はES2015で書きたいよねという人が増えてきた。&lt;/p&gt;

&lt;p&gt;とはいえSprocketsは独自のディレクティブ以外は使えなくて、SprocketsWayから外れると途端に脆い。&lt;br&gt;
ES2015 Modulesを使う場合、gulp&amp;amp;babelなどでES5でコンパイルされたJavaScriptファイルをSprocketsが解釈できるasset pathに吐いて、asset pipelineの上に乗せ直す必要がある。&lt;br&gt;
エイヤでやっちゃえばいいじゃんとも思うが、規模がデカくなると一気にやるのは時間もかかるし、他の人も開発しているので中々に難しい。上手く区切りながら移行を進めていく必要がある。&lt;/p&gt;

&lt;p&gt;そうなると、移行中はSprocketsによるビルドの仕組みとgulp両方覚える必要がある。&lt;br&gt;
でないとデプロイ時にアセット周りで不具合が起きたときに追えない。&lt;br&gt;
結構こいつが問題で、両方追える人増やすのも大変だし、できればより汎用的なツールであるgulpだけでフロントエンドをビルドできるようにしたいなと思い始めた。&lt;/p&gt;

&lt;p&gt;その他にも、特殊な事情でPrecompile時のRuby版Sassのコンパイルが遅かったり、もうCoffeeScriptファイルが多すぎてdevelopment環境で初回ビルドが遅すぎるというのもやりたくなった理由だったりする。&lt;/p&gt;

&lt;p&gt;XXX-railsなどGemで読んでいるフロントエンド系ライブラリも気づけば作者が全然アップデートしてくれなくなったものもあるし、依存ライブラリの定義がGemfileやpackage.json、Bowerfileなど散らばるのもよくない。全てpackage.jsonで管理したい。&lt;/p&gt;

&lt;h2&gt;Sprocketsがやっていること&lt;/h2&gt;

&lt;p&gt;ざっくりいうと5つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;asset_pathやimage_urlなどのヘルパー関数を組み込む&lt;/li&gt;
&lt;li&gt;「//= foo」や「/*= bar */」などのディレクティブを解釈してよしなにconcat&lt;/li&gt;
&lt;li&gt;CoffeeScriptやScssやJSTをコンパイル&lt;/li&gt;
&lt;li&gt;(Precompile時) concatしたファイルの内容からmd5ハッシュを作りファイル名につける&lt;/li&gt;
&lt;li&gt;(Precompile時) ビルドした各ファイルの情報をmanifest.jsonに書き込む&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後のはprecompile時のみ必要な処理で、development時は不要。&lt;br&gt;
これらをNode.jsの世界で実現できれば、gulpfileのみでRailsのフロントエンドなファイルをビルドすることが可能になるはず。&lt;/p&gt;

&lt;h2&gt;gulpだけでなんとかできない？&lt;/h2&gt;

&lt;p&gt;探してみると過去にSprockets脱却にチャレンジしている人は結構いる。&lt;br&gt;
最後のは弊社の若手フロントエンドヤンキーによるスライド。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/joker1007/items/9068e223744b3ac8c6dd"&gt;Sprockets再考 モダンなJSのエコシステムとRailsのより良い関係を探す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sssslide.com/speakerdeck.com/katryo/sprocketsjue-tinitiao-zhan-sita"&gt;Sprockets絶ちに挑戦した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/masatonoguchi169/sprockets-49965435"&gt;Sprocketsを捨てたい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;manifest.jsonについてはjoker1007さんの&lt;a href="https://github.com/joker1007/gulp-rev-rails-manifest"&gt;gulp-rev-rails-manifest&lt;/a&gt;を使えば解決できそう。  &lt;/p&gt;

&lt;p&gt;上のスライドにも書かれている、SCSS内に書かれたasset_pathやimage_urlなどのSprocketsが提供しているヘルパー関数をどう解決するかが難関っぽい。&lt;br&gt;
Precompile時はmd5ハッシュ値を使ったファイル名に変換するなどしないと画像を読み込めなくなってしまう。。&lt;br&gt;
SprocketsではSassコンパイラにカスタム関数として定義してコンパイル時に変換している。&lt;/p&gt;

&lt;p&gt;「//=require XXX」などのディレクティブについてもCommonJSやES2015 Modulesに全て置き換えるのが前提となっている。&lt;br&gt;
規模が大きいとその書き換えが大変なので、できればそのまま使えるようにしたい。&lt;/p&gt;

&lt;p&gt;ソリューションが必要だ！&lt;/p&gt;

&lt;h2&gt;全部解決できるgulpプラグイン作った&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/waka/gulp-sprockets"&gt;gulp-sprockets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;詳しくはREADMEとsample下をどうぞ。&lt;br&gt;
移行後はサクッと外すだけにしたかったので、各種処理を提供するgulpストリームとして作った。&lt;br&gt;
実際社内のRailsアプリで試してAsset PipelineのOn/Off両方で動いているのが確認できた。&lt;/p&gt;

&lt;p&gt;こんな感じでgulpでビルドするとSprocketsでビルドしたときと同等の成果物ができる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sprockets&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gulp-sprockets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build:css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app/assets/stylesheets/*.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sprockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulpIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sprockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;precompile&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destPath&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sprocketsディレクティブは使ってない、でもPrecompileは行いたい場合はプラグイン外してprecompileプラグインだけ実行すればmanifest.jsonに書き出されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;build:es2015&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app/assets/javascripts/*.es&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulpIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;release&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sprockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;precompile&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;destPath&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ヘルパー関数はそういえばnode-sassもv3からカスタム関数定義できることを思い出したのでコンパイラに定義した。&lt;/p&gt;

&lt;p&gt;ディレクティブは最近はEsprimaやPostCSSを使うとコメント部をASTから簡単に取ってこれるので取得したコメントから雑に解釈させてる。&lt;/p&gt;

&lt;p&gt;コンパイル処理もサポートしたので、ES2015で書いたファイルもrequireディレクティブで読み込めるとかそういうのも出来そう。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ReactiveCocoa Tokyoで発表した</title>
    <link rel="alternate" href="http://waka.github.io/2014/10/26/reactivecocoa_tokyo_freee.html"/>
    <id>http://waka.github.io/2014/10/26/reactivecocoa_tokyo_freee.html</id>
    <published>2014-10-26T00:00:00+0000</published>
    <updated>2017-02-05T15:42:18+0900</updated>
    <author>
      <name>yo_waka</name>
    </author>
    <content type="html">&lt;h1&gt;ReactiveCocoa Tokyoで発表した&lt;/h1&gt;

&lt;p&gt;先週になりますが、「&lt;a href="http://connpass.com/event/8680/"&gt;ReactiveCocoa Tokyo&lt;/a&gt;というイベントがあり、そこでfreee社での導入の経緯やMVVMでのReactiveCocoaの使い方について話してきました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src="//www.slideshare.net/slideshow/embed_code/40422528" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/yo_waka/reactivecocoa-tokyo" title="freee社でのReactiveCocoa活用例" target="_blank"&gt;freee社でのReactiveCocoa活用例&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/yo_waka" target="_blank"&gt;yo_waka &lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;ReactiveCocoaは役割上ロックインされがちで、そこをなるべくゆるやかに導入していくにはというのが ninjinkunさんの発表に対して、ロックインされると各レイヤに統一感出ていいよと、対比ぽい感じができたのでよかったです。&lt;/p&gt;

&lt;p&gt;ReactiveCocoaの魅力は、MVVMのコンポーネント間のインターフェースを統一できること、またアプリ固有の非同期処理や入力処理を統一的なインターフェースでラップできるフレームワークとして使えることです。&lt;br&gt;
自分が知る限りでは上記のことをやるならReactiveCocoaが一番よくできていてまた開発も活発だと思います。&lt;/p&gt;

&lt;p&gt;@ikesyoさんに懇親会で聞いた限りだと、Swiftブランチは実運用にはもうちょっと時間がかかりそうだなという印象です。でも粛々と開発は進んでいるようなので期待。&lt;/p&gt;

&lt;p&gt;終わった後、同日開催の&lt;a href="http://connpass.com/event/8629/"&gt;iOS/Swift勉強会@ヤフー&lt;/a&gt;をピザとビール片手にみんなで眺めたというのもちょっと新鮮で楽しかった。&lt;br&gt;
会場の迷惑にならないので思う存分ワイワイできるw&lt;/p&gt;

&lt;p&gt;freee社で50人規模の勉強会を開催するのは初めてだったのですが、当日欠席する人も思ったより少なくてよかった。これをきっかけにReactiveCocoaの導入事例が増えるといいなあ。&lt;br&gt;
大阪から駆けつけてくれた @ikesyoさん、主催の @ninjinkunさん、社内でいろいろ調整してくれた @yonekawaさん、トップバッターで話してくれた @tinpayさん、LT発表者の皆様ありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/rac_01.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/assets/images/rac_02.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;@ymrl 写真拝借しました。当日はありがとうございました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>volley（サブプロジェクト）のbuildToolsVersionをafterEvaluateで上書く</title>
    <link rel="alternate" href="http://waka.github.io/2014/7/19/gradle_module_build.html"/>
    <id>http://waka.github.io/2014/7/19/gradle_module_build.html</id>
    <published>2014-07-19T00:00:00+0000</published>
    <updated>2017-02-05T15:42:18+0900</updated>
    <author>
      <name>yo_waka</name>
    </author>
    <content type="html">&lt;h1&gt;volley（サブプロジェクト）のbuildToolsVersionをafterEvaluateで上書く&lt;/h1&gt;

&lt;p&gt;Android StudioがBetaになったので、0.8.2に上げようとしたらモジュールのビルドでハマった。&lt;/p&gt;

&lt;p&gt;Android Studioのバージョンを上げるときは、build.gradleを弄る時でもある。&lt;br&gt;
Betaに上げるからには最新版のGradleプラグインとAndroid SDKでコンパイル&amp;amp;ビルドできるようにしたい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// project/gradle/gradle-wrapper.properties&lt;/span&gt;
&lt;span class="n"&gt;distributionUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//services.gradle.org/distributions/gradle-1.12-all.zip&lt;/span&gt;

&lt;span class="c1"&gt;// project/build.gradle&lt;/span&gt;
&lt;span class="n"&gt;buildscript&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mavenCentral&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;classpath&lt;/span&gt; &lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;build:gradle:&lt;/span&gt;&lt;span class="mf"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// project/app/build.gradle&lt;/span&gt;
&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;compileSdkVersion&lt;/span&gt; &lt;span class="mh"&gt;20&lt;/span&gt;
  &lt;span class="n"&gt;buildToolsVersion&lt;/span&gt; &lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;20.0.0&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかしビルドエラー。&lt;br&gt;
ルートプロジェクトのGradleプラグインのバージョンを0.12に上げると、buildToolsVersionが&amp;quot;19.1&amp;quot;以上でないとビルドできない。&lt;br&gt;
僕の環境では&lt;a href="https://android.googlesource.com/platform/frameworks/volley/"&gt;volley&lt;/a&gt;をモジュール（submodule）として組み込んでいて、compileSdkVersionとbuildToolsVersionがこのように指定されている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// modules/volley/build.gradle&lt;/span&gt;
&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;compileSdkVersion&lt;/span&gt; &lt;span class="mh"&gt;19&lt;/span&gt;
  &lt;span class="n"&gt;buildToolsVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;19&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;volleyのソースを見る限りbuildToolsVersionを20に上げても特に問題なさそうなので、何とかしてビルドが実行される前にandroid()の中身を上書きしたい。&lt;br&gt;
と思って、&lt;a href="http://www.gradle.org/docs/1.12/userguide/userguide.html"&gt;Gradle User Guide&lt;/a&gt;を眺めていたら、Project.afterEvaluate()というものを見つけた。&lt;br&gt;
Project.afterEvaluate()は、そのプロジェクトのビルドスクリプトが評価された後に実行されるらしい。まさにやりたいことと一致！&lt;/p&gt;

&lt;p&gt;Gradleで分からないことがあれば、&lt;a href="http://www.gradle.org/docs/1.12/userguide/userguide.html"&gt;Gradle User Guide&lt;/a&gt;を見るのがオススメ。&lt;br&gt;
Gradleのバージョンごとに用意されているので、使っているものに合わせて見るとよさげ（ちょくちょく変わったりするので）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;subprojects&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;subproject&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;afterEvaluate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subproject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;compileSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
        &lt;span class="n"&gt;buildToolsVersion&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;20.0.0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、モジュールとして組み込んでいるライブラリプロジェクト全てのcompileSdkVersionとbuildToolsVersionをアプリのそれと合わせることができる。&lt;br&gt;
もし特定のプロジェクトだけどうしても&amp;quot;19.1&amp;quot;でビルドしたければ、プロジェクトごとに指定すればおk。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;volley&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;afterEvaluate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;compileSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
      &lt;span class="n"&gt;buildToolsVersion&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;19.1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
</feed>
